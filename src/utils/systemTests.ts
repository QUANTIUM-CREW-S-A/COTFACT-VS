import { supabase } from '@/lib/supabase';
import { testSupabaseConnection } from '@/services/api';

/**
 * Funci√≥n principal para probar todas las funcionalidades del sistema
 * Esta funci√≥n debe ser llamada despu√©s de que el usuario haya iniciado sesi√≥n
 */
export async function testAppFunctionality() {
  console.log("üîé Iniciando pruebas del sistema...");

  // Bandera para rastrear si hay alg√∫n error cr√≠tico
  let hasCriticalError = false;

  // 1. Verificar conexi√≥n a base de datos
  try {
    console.log("‚è≥ Probando conexi√≥n a la base de datos...");
    const dbConnected = await testSupabaseConnection();
    
    if (!dbConnected) {
      hasCriticalError = true;
      throw new Error("‚ùå Fallo en conexi√≥n a la base de datos");
    }
    console.log("‚úÖ Conexi√≥n a base de datos correcta");
  } catch (error) {
    console.error("‚ùå Error al verificar la conexi√≥n a la base de datos:", error);
    hasCriticalError = true;
  }

  // 2. Probar m√©todos HTTP (GET, POST, PUT, DELETE)
  try {
    console.log("‚è≥ Probando m√©todos HTTP...");
    
    // Probar GET - Obtener lista de clientes
    console.log("  ‚è≥ Probando m√©todo GET...");
    const { data: getResult, error: getError } = await supabase
      .from('customers')
      .select('*')
      .limit(1);
    
    if (getError) throw new Error(`M√©todo GET fall√≥: ${getError.message}`);
    console.log("  ‚úÖ M√©todo GET funcionando");
    
    // Probar POST - Crear un cliente temporal de prueba
    console.log("  ‚è≥ Probando m√©todo POST...");
    const testCustomer = {
      name: "Cliente Prueba",
      email: "test@example.com",
      created_at: new Date().toISOString(),
      created_by: (await supabase.auth.getUser()).data.user?.id || 'anonymous'
    };
    
    const { data: postResult, error: postError } = await supabase
      .from('customers')
      .insert(testCustomer)
      .select()
      .single();
    
    if (postError) throw new Error(`M√©todo POST fall√≥: ${postError.message}`);
    const testCustomerId = postResult?.id;
    console.log("  ‚úÖ M√©todo POST funcionando");
    
    // Probar PUT - Actualizar el cliente reci√©n creado
    if (testCustomerId) {
      console.log("  ‚è≥ Probando m√©todo PUT...");
      const { error: putError } = await supabase
        .from('customers')
        .update({ name: "Cliente Actualizado" })
        .eq('id', testCustomerId);
      
      if (putError) throw new Error(`M√©todo PUT fall√≥: ${putError.message}`);
      console.log("  ‚úÖ M√©todo PUT funcionando");
      
      // Probar DELETE - Eliminar el cliente de prueba
      console.log("  ‚è≥ Probando m√©todo DELETE...");
      const { error: deleteError } = await supabase
        .from('customers')
        .delete()
        .eq('id', testCustomerId);
      
      if (deleteError) throw new Error(`M√©todo DELETE fall√≥: ${deleteError.message}`);
      console.log("  ‚úÖ M√©todo DELETE funcionando");
    }
    
    console.log("‚úÖ Todos los m√©todos HTTP est√°n funcionando");
  } catch (error: any) {
    console.error("‚ùå Error al verificar los m√©todos HTTP:", error.message);
  }

  // 3. Verificar persistencia de sesi√≥n
  try {
    console.log("‚è≥ Verificando persistencia de la sesi√≥n...");
    const { data: { user }, error: sessionError } = await supabase.auth.getUser();
    
    if (sessionError || !user) {
      throw new Error("‚ùå Sesi√≥n de usuario no disponible o expirada");
    }
    console.log("‚úÖ La sesi√≥n de usuario est√° activa", user?.email);
  } catch (error) {
    console.error("‚ùå Error al verificar la sesi√≥n de usuario:", error);
  }

  // 4. Verificar secci√≥n de clientes
  try {
    console.log("‚è≥ Verificando funcionalidad de clientes...");
    const { data: customers, error: customersError } = await supabase
      .from('customers')
      .select('*')
      .limit(5);
    
    if (customersError) {
      throw new Error(`‚ùå Error al acceder a los datos de clientes: ${customersError.message}`);
    }
    
    if (customers && customers.length > 0) {
      console.log(`‚úÖ √Årea de clientes accesible (${customers.length} clientes encontrados)`);
    } else {
      console.log("‚ö†Ô∏è √Årea de clientes accesible, pero no hay datos");
    }
  } catch (error) {
    console.error("‚ùå Error al verificar la secci√≥n de clientes:", error);
  }

  // 5. Verificar secci√≥n de configuraci√≥n
  try {
    console.log("‚è≥ Verificando acceso a la configuraci√≥n...");
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      throw new Error("No se puede acceder a la informaci√≥n del usuario actual");
    }
    
    // Intentar acceder a la informaci√≥n de la empresa
    const { data: companyInfo, error: companyError } = await supabase
      .from('company_info')
      .select('*')
      .eq('user_id', user.id);
    
    if (companyError) {
      throw new Error(`Error al acceder a la configuraci√≥n de la empresa: ${companyError.message}`);
    }
    
    // Intentar acceder a las preferencias de plantilla
    const { data: templatePrefs, error: prefError } = await supabase
      .from('template_preferences')
      .select('*')
      .eq('user_id', user.id);
    
    if (prefError) {
      throw new Error(`Error al acceder a las preferencias de plantilla: ${prefError.message}`);
    }
    
    console.log("‚úÖ Acceso a la secci√≥n de configuraci√≥n correcto");
  } catch (error) {
    console.error("‚ùå Error al verificar la secci√≥n de configuraci√≥n:", error);
  }

  // 6. Verificar exportaci√≥n
  try {
    console.log("‚è≥ Verificando funcionalidad de exportaci√≥n...");
    
    // Verificar que existen los archivos de exportaci√≥n necesarios
    const exportModules = {
      documentExport: await import('@/utils/documentExport'),
      pdfExport: await import('@/utils/pdfExport')
    };
    
    if (!exportModules.documentExport || !exportModules.pdfExport) {
      throw new Error("M√≥dulos de exportaci√≥n no encontrados");
    }
    
    console.log("‚úÖ M√≥dulos de exportaci√≥n disponibles");
    
    // Obtener un documento para probar
    const { data: documents, error: documentsError } = await supabase
      .from('documents')
      .select('*')
      .limit(1);
    
    if (documentsError) {
      throw new Error(`No se pueden obtener documentos: ${documentsError.message}`);
    }
    
    if (!documents || documents.length === 0) {
      console.log("‚ö†Ô∏è No hay documentos disponibles para probar la exportaci√≥n");
    } else {
      console.log("‚úÖ Documentos disponibles para exportaci√≥n");
    }
  } catch (error) {
    console.error("‚ùå Error al verificar la funcionalidad de exportaci√≥n:", error);
  }

  // 7. Verificar si hay errores de consola adicionales
  try {
    console.log("‚è≥ Verificando errores adicionales...");
    
    // Verificar si el navegador es compatible
    const isChrome = navigator.userAgent.indexOf("Chrome") > -1;
    const isEdge = navigator.userAgent.indexOf("Edg") > -1;
    const isFirefox = navigator.userAgent.indexOf("Firefox") > -1;
    
    if (!isChrome && !isEdge && !isFirefox) {
      console.warn("‚ö†Ô∏è Navegador no completamente compatible. Recomendamos Chrome, Edge o Firefox");
    } else {
      console.log("‚úÖ Navegador compatible");
    }
    
    // Verificar la conexi√≥n a Internet
    const isOnline = navigator.onLine;
    if (!isOnline) {
      console.error("‚ùå No hay conexi√≥n a Internet");
    } else {
      console.log("‚úÖ Conexi√≥n a Internet disponible");
    }
  } catch (error) {
    console.error("‚ùå Error al verificar errores adicionales:", error);
  }

  // Resumen final
  const emoji = hasCriticalError ? "‚ö†Ô∏è" : "‚úÖ";
  console.log(`\n${emoji} Pruebas finalizadas. ${hasCriticalError ? "Se encontraron errores cr√≠ticos." : "Sistema funcionando correctamente."}`);
  
  return !hasCriticalError;
}

// Funci√≥n para ejecutar todo el test y mostrar un informe amigable
export async function runDiagnostics() {
  console.log("%c COTFACT-VS - Diagn√≥stico del Sistema ", "background: #3b82f6; color: white; padding: 10px; font-size: 16px; font-weight: bold; border-radius: 5px;");
  
  try {
    const success = await testAppFunctionality();
    
    if (success) {
      console.log("%c ‚ú® ¬°Sistema en buen estado! ‚ú® ", "background: #22c55e; color: white; padding: 10px; font-size: 14px; font-weight: bold; border-radius: 5px;");
    } else {
      console.log("%c ‚ö†Ô∏è Se detectaron problemas en el sistema ‚ö†Ô∏è ", "background: #ef4444; color: white; padding: 10px; font-size: 14px; font-weight: bold; border-radius: 5px;");
      console.log("Por favor, revise los errores detallados arriba y contacte al soporte t√©cnico si necesita ayuda.");
    }
  } catch (error) {
    console.error("Error cr√≠tico durante el diagn√≥stico:", error);
    console.log("%c üö® Error cr√≠tico en el diagn√≥stico üö® ", "background: #991b1b; color: white; padding: 10px; font-size: 14px; font-weight: bold; border-radius: 5px;");
  }
}